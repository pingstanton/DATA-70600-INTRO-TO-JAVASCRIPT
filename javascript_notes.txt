JAVASCRIPT COURSE NOTES
Last updated Nov. 9, 2023

Matthew Stanton | pingstanton@gmail.com | mstanton@gradcenter.cuny.edu

Webserver backups:
https://chimaboo.com/coursework/DATA70600/javascript_notes.txt

GitHub backups:
https://github.com/pingstanton/DATA-70600-INTRO-TO-JAVASCRIPT/

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

DATA 70600 / DHUM 70600 - INTRODUCTION TO JAVASCRIPT
(Thurs 6:30-7:30 Online via Zoom) - Instructor: Stephen Zweibel (Steve)

Zoom: https://gc-cuny-edu.zoom.us/j/5363682686?pwd=amdYRTEzVUdIaVpCVTlwNDFFRjNNdz09

Slack: https://gcdigitalmasters.slack.com/archives/C05Q2FU752T

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Using Your Browser's Console - Google Chrome:
* Command + Option + i (Mac)
* Ctrl + Shift + i (Windows/Linux)
* Open the Chrome settings menu in the top-right corner of your browser window and select More Tools > Developer Tools.

About the Console...

The JavaScript console is a valuable tool for developers when working with JavaScript in web browsers or Node.js. It provides a way to interact with and inspect your code and the runtime environment. Here are some of the primary uses and benefits of the JavaScript console:

1. Debugging: The console is essential for debugging JavaScript code. Developers can use functions like `console.log()`, `console.error()`, and `console.warn()` to output information about variables, objects, and the flow of their code. This helps identify and diagnose issues and bugs in the code.

2. Logging: Developers can log messages and data to the console to get insights into the program's behavior. This is especially useful for tracking the values of variables and understanding how the code executes.

3. Error handling: JavaScript errors and exceptions can be caught and logged in the console. Error messages provide information about what went wrong, which is crucial for debugging and fixing issues in your code.

4. Performance analysis: You can measure the performance of your code using the console. Tools like `console.time()` and `console.timeEnd()` allow you to measure how long a specific portion of your code takes to execute. This can help in optimizing performance-critical sections of your application.

5. Interactive exploration: The console allows you to interactively explore and manipulate JavaScript objects and functions. You can execute code snippets and see the results immediately, which is helpful for experimenting with code and testing ideas.

6. Profiling: Browsers often provide profiling tools that can be accessed through the console. These tools help you analyze the performance of your JavaScript code, identifying bottlenecks and areas for improvement.

7. Inspecting DOM: In a web browser environment, you can inspect and manipulate the Document Object Model (DOM) of a web page using the console. This is useful for web development and debugging client-side scripts.

8. Network requests: The console can display information about network requests made by your application, which is helpful for tracking and debugging AJAX calls, HTTP requests, and responses.

9. Environment information: You can use the console to gather information about the runtime environment, including the user agent, browser version, and platform. This is valuable for ensuring cross-browser compatibility.

10. Testing and experimentation: The console is a useful tool for quickly testing code snippets or APIs without needing to create a full-fledged application. This can save time during development.

In summary, the JavaScript console is a versatile tool that assists developers in debugging, logging, performance analysis, and interactive experimentation when working with JavaScript in various contexts. It's an indispensable part of the developer's toolkit for building and maintaining web applications.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

8/31: INTRODUCTION &  CHAPTER 2: GETTING STARTED WITH JAVASCRIPT
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=2
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=3

ALERTS

alert("Hello, World!");

CONSOLE.LOG FUNCTION

console.log("Hello, World!");

OPERATORS (returns data type)

< ... less than (true/false)
> ... greater than (true/false)
<= ... less than or equal to (true/false)
>= ... greater than or equal to (true/false)
== ... equal to (true/false)
!= ... not equal to (true/false)
=== ... "strict" equal to (include type such as string, number, etc.)

Also...

% ... remainder (a number)
++ ... increment by one (a number)
-- ... decrement by one (a number)
- .. unary operator, the negative value of number (a number)
** ... exponentiation, base to exponent power (base^exponent) (a number)

+ ... add values if numbers (2 + 3 returns 5)
+ ... concatenate if strings ("my" + "string" returns "my string")

+= ... concatenate if strings (let mystring = "alpha"; mystring += "bet"; returns alphabet)

&& ... logical AND (expr1 && expr2)
|| ... logical OR (expr1 || expr 2)
! ... logical NOT (expr1 ! expr2)

a & b ... bitwise AND
a | b ... bitwise OR
a ^ b ... bitwise XOR

VARIABLES: This is NOT an operator...

= ... set value to a variable (aka "assignment operator")

var a = 1;
var b = 2;
var c = a + b;

var weather = 'sunny';
var statement = 'The weather is ' + weather + ' today.';

RULES FOR VARIABLES
* must begin with a letter or an underscore
* cannot begin with a number (but can contain numbers after first character)
* cannot contain spaces or special characters
* case sensitive
* cannot use JavaScript reserved words
* Avoid hyphens (-), can cause error later if read as subtraction

NOTE: Later assignments recommend against var in favor of let and const

let = sets a global variable on root, or local variable within a function
const = sets a global variable that cannot be changed

REVIEW QUESTIONS

1. console.log() is best used for (select one):
* testing and debugging your code

3. Which of these variable names are legal (valid) in JavaScript? (select all that apply)
* my_books
* myBooks
* myBooks1

CHALLENGES

1. In JavaScript, as in algebra, ambiguity in a mathematical expression is resolved by rules of precedence (PEMDAS). For example, the expression 5 + 5 is evaluated as 10, while the expression 5 + 5 * 5 is evaluated as 30. Using the rules of precedence and the console, rework the expression 5 + 5 * 10 /2 so that it resolves to 50. Next, utilizing the variables defined below, write an expression that resolves to true using the double equals == operator.

const result = (5 + 5) * 10 / 2;
console.log(result);
// returns 50

var a = 5 + 5;
var b = 10;
console.log(a == b);
// returns "true"


2. Using variables, write a simple program that 1) sends an alert to the user telling them to open the developer console in their browser and 2) logs a message to the console saying they have won a prize. Note: This is an imaginary practice scenario. In reality, you would want to avoid using console.log() to send messages to users when actually deploying your website. Any information you want the user of your webpage to see should be presented on the webpage itself.

alert("Open the developer console in your browser.");
console.log("You have won a prize.");


~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

9/7: CHAPTER 3: IF/THEN
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=4

PROMPTS

var userName = prompt("What is your name?");

var whatAmI = prompt("What am I?", "I am a human!");
// ...in which "I am a human!" will show in the response field and act as the default return value if the user doesn't enter anything themselves

var userAge = prompt("How old are you?");
userAge = parseInt(userAge);
alert("You are " + userAge + " years old.");
typeof userAge;

IF/ELSE STATEMENTS
"If condition is met, then execute the task."

if (condition) {
	// code to run if condition is true
} else {
	// code to run if condition is false
}

Example...

    var userAge = prompt("How old are you?");
    userAge = parseInt(userAge);
    if (userAge >= 18) {
        alert("You are legally old enough to vote in the U.S.");
    } else {
        alert("You are not legally old enough to vote in the U.S.");
    }

ELSE IF STATEMENTS

if (condition1){
    // code to run if condition1 is true
    if (condition2){
        // code to run if condition2 is true
        if (condition3){
            // code to run if condition3 is true
        } else {
            // code to run if condition3 is false
        }
    } else {
        // code to run if condition2 is false
    }
} else {
    // code to run if condition1 is false
}

Example...

    var userAge = prompt("How old are you?");
    userAge = parseInt(userAge);

    if (userAge >= 18) {
        alert("You are legally old enough to vote and drive in the U.S.");
    } else if (userAge >= 16) {
        alert("You are not old enough to vote, but you are old enough to drive in the U.S.");
    } else {
        alert("You are not legally old enough to vote or drive in the U.S.");
    }

SWITCH STATEMENTS

    switch (variable) {
        case value1:
            // code to run if `variable` is `value1`
            break;
        case value2:
            // code to run if `variable` is `value2`
            break;
        case value3:
            // code to run if `variable` is `value3`
            break;
        default:
            // code to run if `variable` is not `value1`, `value2`, or `value3`
            break;
    }

Example...

    var difficulty = prompt("What difficulty would you like to play? 1- Easy, 2- Medium, 3- Hard");
    switch (difficulty) {
        case "1":
            alert("You have selected the Easy difficulty.");
            break;
        case "2":
            alert("You have selected the Medium difficulty.");
            break;
        case "3":
            alert("You have selected the Hard difficulty.");
            break;
        default:
            alert("Invalid entry.");
            break;
    }

CHOOSE YOUR OWN ADVENTURE

var playerName, playerChoice;

    var playerName = prompt("What is your name?");
    alert("Welcome, " + playerName + "!");

    alert(playerName + ", you are the last person on earth, sitting alone in a room. There is a knock on the door... What will you do?");
    playerChoice = prompt("Enter 1 to cautiously approach the door. Enter 2 to hide under the table.");
    if (playerChoice == "1"){
        alert("Your hands are trembling as you approach the door. You pause a moment before it.");
        playerChoice = prompt("Enter 1 to bravely open the door. Enter 2 to look through the door's peephole.");
        if (playerChoice == "1"){
            alert("You swing the door open with courageous gusto.")
        }
        else if (playerChoice == "2"){
            alert("You cautiously look through the peephole. You make out a vague shape looming before the door.")
        }
        else {
            alert("Invalid entry.");
        }
    } else if (playerChoice == "2"){
        alert("As you hide under the table you hear the doorknob rattling.");
        playerChoice = prompt("Enter 1 to stay hidden under the table. Enter 2 to get up and find a weapon to defend yourself with.");
        if (playerChoice == "1"){
            alert("Whatever is at the door has now begun banging on it loudly.");
        }
        else if (playerChoice == "2"){
            alert("You quickly but quietly get up and look around. You see a broom in the corner of the room and wield it mightily.");
        }
        else {
            alert("Invalid entry.");
        }
    }
    else {
        alert("Invalid entry.");
    }

REVIEW QUESTIONS

1. The prompt() function always returns a string.
* True

2. The code snippet below will throw errors or otherwise not work as intended. Why? Take a moment to look over it carefully, then select all that apply in the quiz below.

prompt("What is your name?");
if (name = "Sal Ami")
    alert("Hello name!");
else
    alert("It's too bad your name isn't" + name + ".");

* prompt() needs to be assigned to a variable.
* a double-equals (rather than a single equals) operator is needed in the if statement.
* the first alert will not correctly display name as intended.
* the if/else statement needs curly braces for each part.

3. Switch statements should have (select all that apply):

* break
* curly braces
* a default case

CHALLENGES

1. Write a program that has the user input a number. If the number is even, alert "The number is even." If the number is odd, alert "The number is odd."

var userInput = prompt("Enter a number:");
if (userInput % 2 === 0) {
    alert("The number is even.");
} else {
    alert("The number is odd.");
}

2. Utilizing switch statements, write a short Choose Your Own Adventure story that allows the player 3 choices to choose from at a time.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

9/14: CHAPTER 4: LOOPS AND ARRAYS
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=5

ARRAYS

var myArray1 = [1, 2, 3, 4, 5];
var myArray2 = ['a', 'b', 'c', 'd', 'e'];
var myArray3 = [true, false, true, false];
var myArray4 = [1, 2, 'dog', true, [1, 2, 3]];

Accessing Values in an Array...

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
alert(myArray[0]); // returns 1

Changing Values in an Array...

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
myArray[0] = 'cat';
alert(myArray[0]); // returns 'cat'

Adding Values to an Array...

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
myArray.push('cat');
alert(myArray[5]); // returns 'cat'

Removing Values from an Array...

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
myArray.pop();
alert(myArray[4]);

Splicing an Array...

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
myArray.splice(0, 2);
alert(myArray[0]); // returns 'dog'

Determining the Length of an Array...

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
alert(myArray.length); // returns 5
alert(myArray[myArray.length - 1]); // returns [1, 2, 3]

THE SORT() METHOD

By letter...

var myArray = ['c', 'b', 'a', 'e', 'd'];
myArray.sort();
alert(myArray); // returns ['a', 'b', 'c', 'd', 'e']

By number...

var myArray = [2, 4, 3, 1, 5];
myArray.sort();
alert(myArray); // returns [1, 2, 3, 4, 5]

THE FOR LOOP

for (var i = 0; i < array.length; i++) {
    // do something
}

To break it down a little more...
* var i = 0: This is the starting point of the loop. It will serve as the index number of the first element in the array.
* i < array.length: This is the condition of the loop. It is a boolean expression that determines whether the loop should continue. In other words, it says: "while i is less than the length of the array, do the following:".
* i++: This is the incrementor. ++ is a new operator that means that the value of i will increase or increment by 1 each time the loop executes. We use it to increment the index number of the loop so that it will continually move to the next element in the array.

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
for (var i = 0; i < myArray.length; i++) {
    alert(myArray[i]);
}

FOR LOOPS

var num = 5;

// looping from i = 1 to 5
// in each iteration, i is increased by 1
for (var i = 1; i <= num; i++) {
    console.log(i);     // printing the value of i
}

THE WHILE LOOP

var i = 0;
while (i < 5) {
    alert(i);
    i++;
}

Note: It is very important to make sure your while loops ultimately end by satisfying the condition you specify. If you don't, the loop will continue forever, and the user will be required to force-quit your program or close the window to stop it.

PUTTING IT ALL TOGETHER - THE LIBRARY APP

var bookTitles = [
    'Too Loud a Solitude',
    'Things Fall Apart',
    'The Master and Margarita',
    'The Three Body Problem',
    'The Woman Destroyed',
    'Beloved',
    'The Tenant of Wildfell Hall',
    "Lady Chatterley's Lover",
];

bookTitles.sort();
var libRequests = [];
var requestedTitle = "";

alert("Welcome to the library!\n\nPlease search for a book title when prompted.\n\nType `request` at the prompt to make a request for a book.\n\nYou can also type `display` at the prompt to display all available book titles.\n\nType `quit` at the prompt to quit the program.");

var response = "";
while (response != 'quit') {
    response = prompt("Search for a book title or make a request by typing 'request': ");
    // check if the user wants to make a request
    if (response == 'request') {
        requestedTitle = prompt("What book would you like to request? ");
        libRequests.push(requestedTitle); // add the requested title to the library requests array
        alert("You have requested the following titles:" + libRequests + "."); // alert the user their requests
    }
    // check if the user wants to display all the titles
    else if (response == 'display') {
        for (var i = 0; i < bookTitles.length; i++) {
            alert(bookTitles[i]); // display all available book titles
            }
    }
    // otherwise, check if the book the user entered is in the library
    else {
        var bookIndex = bookTitles.indexOf(response);
        if (response != 'quit'){
            // if indexOf returns -1, the book the user entered is not in the library
            if (bookIndex == -1) {
                alert("Sorry, we don't have that book. You can always request it.");
            }
            else {
                alert("Yes, " + response + " is available to check out.");
            }
        }
    }
}


REVIEW QUESTIONS

1. What will be the result of the alert in the code below?

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
myArray.pop();
alert(myArray[4]);

* undefined

2. What will be the result of the alert in this code snippet?

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
alert(myArray.length);

* 5

3. What will be the result of the alert here?

var myArray = [1, 2, 'dog', true, [1, 2, 3]];
myArray.splice(0, 2);
alert(myArray[0]);

* dog

CHALLENGES

1. Write a for loop that prints all even numbers from 0 to 100 to the console.

var num = 100;
for (var i = 1; i <= num; i++) {
    console.log(i);
}

2. The library program is very case sensitive, requiring the user to enter exact punctuation and capitalization of a book title. This is not a very robust search. Try improving the program using the toLowerCase method, which converts all the letters of a string to lowercase, to make the search parameters case insensitive. Hint: To match the two terms, you will want to perform the toLowerCase method both on the user's response as well as on each book title in the library. Try storing these results in new variables!

NOTE: toLowerCase METHOD

string.toLowerCase()

...as in:

const originalString = "Hello World";
const lowercaseString = originalString.toLowerCase();

console.log(lowercaseString); // Output: "hello world"

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

9/21: CHAPTER 5: FUNCTIONS
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=6

FUNCTIONS

function functionName(parameter1, parameter2, ...) {
    // code to be executed
    return value;
}

Notes:
* naming conventions for functions are lower CamelCase
* define the function's parameters or arguments within closed parentheses ()
* parameters are the values that will be passed into the function when it is called
* parameters are separated by commas
* functions return a value (in other words, a function takes some input, transforms that input somehow, and returns an output)

function add(num1, num2) {
    var sum = num1 + num2;
    return sum;
}
var result = add(1, 2);
alert(result);

// returns 3 in an alert

SCOPE - RETHINKING VARIABLE DECLARATIONS
var vs. let and const

var name = 'John';
let age = 30;
const isAdmin = true;

Notes:
* var declarations can be "globally" and "function/locally" scoped. 
* let declarations are block-scoped, only available within the block of code in which it is declared. 
* const is block-scoped but is immutable; once declared, const cannot be updated or re-declared.

THE STUDENT GRADES PROGRAM

Let's imagine that students have just submitted several homework assignments and we need to evaluate their grades. We want to:

1. Easily display their grades.
2. A new student has joined and submitted work, so we want to add a student to our list of students.
3. Evaluate their numbered grades to a letter (A, B, C, D, or F).

OBJECTS

Objects are collections of key-value pairs, and each key-value pair is called a property. The properties of an object can be accessed using dot notation (objectName.propertyName) or bracket notation (objectName["propertyName"]).

Here we have a student object with three properties: name, grade, and GPA. To access the value of a property, we use the . syntax with the key. 

let student = {
    name: "Bob",
    grade: "A",
    GPA: 4.0
};

console.log(student.name); // logs "Bob"
console.log(student.grade); // logs "A"
console.log(student.GPA); // logs 4.0

/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / /

ALSO: How to List the Properties of a JavaScript Object...
https://www.w3docs.com/snippets/javascript/how-to-list-the-properties-of-a-javascript-object.html

let object = {
  name: 'Jack',
  age: 25
};
let keys = Object.keys(object)
console.log(keys);

To retrieve the list of the property names, you can do the following:

let getKeys = function (obj) {
  let keysArr = [];
  for (var key in obj) {
    keysArr.push(key);
  }
  return keysArr;
}

/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / /
Back to zweibel.net...

Multiple objects in an array of objects...

let students = [
    {
        name: "Bob",
        grades: [88, 90, 80, 77, 89]
    },
    {
        name: "Alice",
        grades: [100, 95, 92, 89, 97]
    },
    {
        name: "Juan",
        grades: [91, 90, 94, 86, 90]
    }
];


Printing the Grades...

// print all student names and their grades
function printGrades(students) {
    for (let i = 0; i < students.length; i++) {
        console.log(students[i].name + ": " + students[i].grades);
    }
}

printGrades(students);

Adding a Student...

function addStudent(name, grades) {
    let student = {
        name: name,
        grades: grades
    };
    students.push(student);
}

addStudent("Biff", [71, 80, 56, 65, 60]);

Converting Grades to Letters...

function convertGrades(students) {
    for (let i = 0; i < students.length; i++) {
        let grades = students[i].grades;
        let letterGrade = "";
        for (let j = 0; j < grades.length; j++) {
            if (grades[j] >= 90) {
                letterGrade += "A ";
            } else if (grades[j] >= 80) {
                letterGrade += "B ";
            } else if (grades[j] >= 70) {
                letterGrade += "C ";
            } else if (grades[j] >= 60) {
                letterGrade += "D ";
            } else {
                letterGrade += "F ";
            }
        }
        console.log(students[i].name + ": " + letterGrade);
    }
}

convertGrades(students);

The whole program together...

// array of student objects
let students = [
    {
        name: "Bob",
        grades: [88, 90, 80, 77, 89]
    },
    {
        name: "Alice",
        grades: [100, 95, 92, 89, 97]
    },
    {
        name: "Juan",
        grades: [91, 90, 94, 86, 90]
    }
];

// print all student names and their grades
function printGrades(students) {
    for (let i = 0; i < students.length; i++) {
        console.log(students[i].name + ": " + students[i].grades);
    }
}

//add a new student
function addStudent(name, grades) {
    let student = {
        name: name,
        grades: grades
    };
    students.push(student);
}

// convert grades to letters
function convertGrades(students) {
    for (let i = 0; i < students.length; i++) {
        let grades = students[i].grades;
        let letterGrade = "";
        for (let j = 0; j < grades.length; j++) {
            if (grades[j] >= 90) {
                letterGrade += "A ";
            } else if (grades[j] >= 80) {
                letterGrade += "B ";
            } else if (grades[j] >= 70) {
                letterGrade += "C ";
            } else if (grades[j] >= 60) {
                letterGrade += "D ";
            } else {
                letterGrade += "F ";
            }
        }
        console.log(students[i].name + ": " + letterGrade);
    }
}

// call functions
addStudent("Biff", [71, 80, 56, 65, 60]);
printGrades(students);
convertGrades(students);

REVIEW QUESTIONS

1. What is the naming convention for functions in JavaScript?
* lower camelCase

2. What will be the result of the following code?

if (someValue > 0) {
    let greet = "hi there";
}

console.log(greet);

* ReferenceError: someValue is not defined

3. Should you use the var keyword to declare a variable?
* no

(REALLY THO? SOUNDS LIKE IT WORKS, BUT JS CODE FASHION NO LONGER PREFERS IT...)

ARROW FUNCTIONS
https://www.w3schools.com/js/js_arrow_function.asp

Arrow functions allow us to write shorter function syntax:

Before arrow...

hello = function() {
  return "Hello World!";
}

With arrow...

hello = () => {
  return "Hello World!";
}

CHALLENGES

1. Write a function that always returns the last item in whatever array is passed to it. (Hint: Refer to the Loops and Arrays lesson if you need a refresher on an easy way to get the last element.)

function lastArrayItem(i) {
    return i[i.length - 1]; 
}

const thisArray = [1, 2, 3, 4, 5];
const lastItem = lastArrayItem(thisArray);
console.log(lastItem);

2. Biff decided to drop your class after his unfortunate grades. Add a function to the Student Grades program that will remove Biff from the list of students using the pop method.

// assumes Biff ends up the first name in the array
students.sort();
students.pop(0);
printGrades(students);
convertGrades(students);

3. In the wild, you will often see what are called arrow functions. In modern JavaScript, arrow functions are a shorter way to write functions, and utilize the => (arrow) syntax. Check out this resource to learn about the syntax for arrow functions. Then, try to reformat the following traditional function using arrow function syntax instead:

function add(a, b) {
    return a + b;
}

Arrow functions allow us to write shorter function syntax:

let myFunction = (a, b) => a + b;

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

9/28: CHAPTER 6: MAKING MISTAKES
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=7

COMMON TYPES OF ERRORS

* Syntax Errors: When you fail to add or misspell an element of the language that is needed for the code to be understood.

* Type Errors: When you try to perform an operation on a value of the wrong data type.

* Reference Errors: When trying to use a variable out of the scope in which it was declared.

* Logical Errors: When your syntax is actually correct but the code is not producing what you intended.

Writing Pseudo-code...

create function get password
    store correct password in variable
    prompt user for password
    while password is incorrect
        prompt for password
    alert user they may enter
    end function

General Tips...

1. Understand what your code is doing step by step.
2. Form a hypothesis or two before looking at the code.
3. Resolve syntax errors.
4. Identify key variables or conditions.
5. Think about your logic.

USING console.log() TO DEBUG

A quick and easy way to see the current state of a particular variable or condition.

REVIEW QUESTIONS

1. True or False - A syntax error occurs when code is not typed out correctly.
* True

2. True or False - A reference error occurs when a variable is used outside its scope or before it is declared.
* True

3. True or False - A logical error occurs when code works but is not producing the results you expected.
* True

CHALLENGES

1. Identify the logical error in the following code.

// find the even numbers in an array
let someValues = [0, 1, 2, 3, 4, 5];

for (let i = 0; i < someValues.length; i++) {
    if (someValues[i] / 2 == 0) {
        console.log(someValues[i]);
    }
}

Answer: The function is checking if each value in the array divided by 2 is exactly equal to zero, for which the only correct match is 0 itself. Correcting the "/" operator to "%" to determine the remainder of each value not matching zero corrects the code.

// find the even numbers in an array
let someValues = [0, 1, 2, 3, 4, 5];

for (let i = 0; i < someValues.length; i++) {
    if (someValues[i] % 2 == 0) {
        console.log(someValues[i]);
    }
}

2. Let's say you are writing a program that allows users to manage a collection of recipes. You want the user to be able to add, remove, edit, and search through their recipes. You also want the user to be able to "favorite" individual recipes and let them search and look through their list of favorites. Write some pseudo-code for a program that allows for each of these features.

Create an empty array to store the user's recipes.
Create an empty array to store the user's favorite recipes.

Create a function to add a new recipe to the user's recipes array.
Create a function to delete a new recipe to the user's recipes array.
Create a function to replace a new recipe to the user's recipes array.
Create a function to search and match query to the user's recipes array.
Create a function to list the user's recipes array.

Create a function to add a new recipe to the user's favorite recipes array.
Create a function to delete a new recipe to the user's favorite recipes array.
Create a function to replace a new recipe to the user's favorite recipes array.
Create a function to search and match query to the user's favorite recipes array.
Create a function to list the user's recipes array.


~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

9/29: CHAPTER 7: VS CODE AND GITHUB
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=8

Download: index.html script.js
http://chimaboo.com/coursework/data/javascript.zip

VSCODE
https://code.visualstudio.com/

GIT ON MY MACHINES

My Mac Mini: git version 2.30.1 (Apple Git-130)
My Win 10 Laptop: TBD

STANTON ON GITHUB
https://github.com/pingstanton

To initialize a new local repository, pick an existing or new folder on your computer and open it in VS Code. In the Source Control view, select the Initialize Repository button. This creates a new Git repository in the current folder, allowing you to start tracking code changes.

/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / /
from git --help via MacOS Terminal...

usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / /

REVIEW QUESTIONS

1. A version control system like Git allows you to (select all that apply):
* track changes to your files
* share your files and collaborate with others
* restore files you may have deleted on your own machine
* undo changes and revert to earlier versions

2. True or False - You need to stage your files before committing them.
* True

3. True or False - If you commit your changes, they will be immediately reflected in your GitHub repository.
* False

CHALLENGE

We saw that both the HTML file and the JavaScript file are contributing to the creation of our project webpage. For this challenge, try changing the text that is displayed from the HTML page to whatever you'd like. Once you have made a change and see it reflected in the webpage, stage the change, commit it, and push it to GitHub with an appropriate message.

https://github.com/pingstanton/javascriptWk20230928

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

10/5: CHAPTER 8: HTML AND CSS
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=9

Useful HTML Tags

<p></p>: This tag defines a paragraph of text.
<h1></h1>: This tag defines a header, or a large series of text.
<h2</h2>: This tag defines a smaller header, or a smaller series of text. It descends all the way down to <h6>.
<img src ="..." alt="Text for accessibility purposes" />: This tag sets an image to display, with an alternative text for accessibility. Note that it is a void element, meaning it doesn't have a closing tag.
<a href="...">...</a>: This tag creates a hyperlink.
<div></div>: This tag designates a container block or section for other elements.
<section></section>: This tag creates a section of content.

REVIEW QUESTIONS

1. How do we associate a CSS stylesheet with a HTML file?
* By including a link to the CSS file in the HTML page's <head> element.

2. True or False - ids are created using the . (dot) character and classes are created using the # (hash) character.
* False

3. True or False - Flexboxes are useful because they allow for a dynamic layout of elements on a page.

CHALLENGES

1. Add another joke of your own to the jokes section of your page.

2. Add a link in the jokes section to an online list of jokes using the <a href=""></a> tag. To learn about this tag, see this page.

3. Create a new <section> in your HTML file to display your favorite poem. In CSS, give it an appropriate id, and define the section as a centered flexbox with a different border, background color, and text color.

4. Push all your changes to the project to GitHub.

** ON WEB SERVER **
https://chimaboo.com/coursework/DATA70600/index.html
https://chimaboo.com/coursework/DATA70600/styles.css
https://chimaboo.com/coursework/DATA70600/script.js

Looking ahead: Leaflet - https://leafletjs.com/

From Randip: MapLibre - https://maplibre.org/

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

10/12: CHAPTER 9: INTERACTIVE WEB DESIGN
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=10

Files For The Exercises

https://chimaboo.com/coursework/DATA70600/wk09/9_index.html
https://chimaboo.com/coursework/DATA70600/wk09/9_script.js
https://chimaboo.com/coursework/DATA70600/wk09/9_styles.css

IMPORTING JQUERY

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
Here we are importing the jQuery library from the jQuery CDN (Content Delivery Network). 

USING JQUERY

$("h1").hide();
$("#noShow").hide();

Selecting by Class: Selecting by class is the same as selecting by id, but instead of using the # symbol, we use the . (dot) symbol. 

$(".className")

Appending Elements: Use the .append() method to add a new joke to our joke section. Here we are identifying the element with the id joke (used for our joke <section>) and adding a new paragraph <p> element to it. 

$("#joke").append("<p>Q. What do you call a fake noodle? <br /> A. An impasta</p>");

Remember:

* $("") is the jQuery selector.
* To select an element by id, use # followed by the id name.
* To select an element by class, use . followed by the class name.
* You can use methods like .hide() and .html() and .append() to modify elements that you select.

Documentation: https://api.jquery.com/

ADDING INTERACTIVITY

Creating a Button: <button id="toggleJokes">Toggle Jokes</button>


CSS Styling in JavaScript: We can use the .css() method to add styling to any element. 

For example, to make the button orange, with larger white text, a border, some padding, and some margin space around the button to separate it from other elements, we could add the following code to our style.css file:

#toggleJokes {
    background-color: orange;
    color: white;
    font-size: 20px;
    border: 1px solid white;
    border-radius: 5px;
    padding: 10px;
    margin: 10px;
}

CSS Styling in JavaScript: We can use the .css() method to add styling to any element.

// modify css styles for the button
$("#toggleJokes").css("background-color", "orange");
$("#toggleJokes").css("color", "white");
$("#toggleJokes").css("font-size", "20px");
$("#toggleJokes").css("padding", "10px");
$("#toggleJokes").css("border-radius", "5px");
$("#toggleJokes").css("border", "2px solid black");
$("#toggleJokes").css("margin", "10px");

Instead of writing a bunch of separate lines, we can also use the .css() method to modify the styles of multiple properties of an element at once. To do so, you simply wrap the properties in curly braces and separate them with a comma, writing them out as you would in a typical CSS style sheet.

// modify css styles for the button
$("#toggleJokes").css({
    "background-color": "orange",
    "color": "white",
    "font-size": "20px",
    "padding": "10px",
    "border-radius": "5px",
    "border": "2px solid black",
    "margin": "10px"
});

Making the Button Clickable: We need to add a click event to the button.

$("#toggleJokes").click(function() {
  $("#joke").toggle();
});

More info here: http://api.jquery.com/

REVIEW QUESTIONS

1. True or False - Unless you specify otherwise, a selector will select all elements of the same type on a page.
* True

2. True or False - To select an element by id, use # followed by the id name.
* True

3. True or False - To select an element by class, use . followed by the class name.
* True

CHALLENGES

1. Add an image somewhere on the page. You can learn how to add images here. Note that you will have to save the image within your project folder to be able to load it into your page.

2. Using selectors, give the image rounded corners in CSS or JavaScript.

3. Prompt() the user whether the jokes on our page are good or bad. If the user responds with "bad", then change the header text to "The Worst Jokes Ever!". If the user responds with "good", keep the header text as "The Best Jokes Ever!".

4. Add a button to the page that will change the page's overall color scheme (background color, text color, etc.).

5. Push all your changes to GitHub.


let response = prompt("Are these jokes good or bad?");
if (response === "bad") {
    $("h1").html("The Worst Jokes Ever :-(");
} else if (response === "good") {
    $("h1").html("The Best Jokes Ever :-)");
} else {
    $("h1").html("Bad Jokes Galore");
}



$(document).ready(function(){
  $("#changeStyle").click(function(){
    $("body").css({
        "background-color": "forestgreen",
        "font-style": "italic",
        "font-size": "35px",
        "font-family": "Times New Roman', Times, serif",
        "border": "16px solid pink",
        "border-radius": "80px", 
        "text-decoration": "underline dashed 4px purple",
        "text-transform": "capitalize",
        "box-shadow": "27px 52px 4px 2px rgba(221, 132, 55, .4)",
        "display": "flex",
        "flex-direction": "column",
        "justify-content": "left",
        "align-items": "self-start"
        });   
    })
});


From Stephen Zweibel via Slack Oct. 12 at 7:36 PM

// click to change css style, and back to original
$("#changeStyle").click(function () {
    if ($("#joke").css("color") == "rgb(255, 230, 204)") {
        $("#joke").css("color", "red");
    } else {
        $("#joke").css("color", "rgb(255, 230, 204)");
    }
});


Elizabeth Szypulski to Everyone (Oct 12, 2023, 7:16 PM)

Example of JSON in a project — The project my group did in our methods class used JSON - https://morethansurviving.org/ . We generated JSON from a Google Sheet to have the same data show up in our timeline, map, and gallery

https://morethansurviving.org/

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

10/19: CHAPTER 10: BUILDING A DATA-DRIVEN WEBPAGE
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=11

Building a Data-Driven Webpage...
https://chimaboo.com/coursework/DATA70600/wk10/index.html

THE .map() METHOD

* This method takes the function as an argument and runs that function's operations as it iterates. 
* In doing so, it will create a new array that you can use to store the results of the function without altering the original array. 
* In short, you use .map() whenever you want to build an array out of another array. 

let line1TextArray = []
line1TextArray = line1.map(function(word) {
  return word.text;
});

From ChatGPT:

const newArray = array.map(callback(currentValue[, index[, array]]) {
  // return element for newArray
}, thisArg);

* array: This is the array you want to operate on.
* callback: This is a function that will be called once for each element in the array. It can take three parameters:
* currentValue: The current element being processed in the array.
* index (optional): The index of the current element being processed.
* array (optional): The array map() was called upon.
* thisArg (optional): An optional value to be used as the this value in the callback function.

THE .join() METHOD

The join() method returns an array as a string. 

let line1Text = line1TextArray.join(" ");

From ChatGPT:

The join() method in JavaScript is a built-in function that is used to create a string by concatenating all the elements of an array, separated by a specified delimiter. It takes the elements of an array and joins them together into a single string, with the specified delimiter separating each element. 
* You can use the join() method to create a comma-separated list, space-separated list, or any other custom separator to suit your needs.
* If you want to join elements without any separator, you can pass an empty string as the argument to join():

array.join(separator);

* array: This is the array whose elements you want to join into a string.
* separator (optional): This is the string that is used as a separator between each element while forming the final string. If you omit the separator, the default is a comma (,).

The join() method is particularly useful when you want to convert an array into a formatted string, such as when preparing data for display or when constructing a query string for a URL.

JSON (JavaScript Object Notation)
* JSON objects are very much like JavaScript objects.
* JSON objects are written in key/value pairs.
* JSON objects are surrounded by curly braces { }.
* Keys must be strings, and values must be a valid JSON data type (string, number, object, array, boolean or null).
* Keys and values are separated by a colon.
* Each key/value pair is separated by a comma.
* Arrays are enclosed in square brackets [ ] and each element is separated by a comma.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

10/26: CHAPTER 11: JSON
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=12

REVIEW QUESTIONS

1. True or False - map() allows you to iterate over an array, but it doesn't return anything.
* True

2. True or False - We can import a JSON dataset as an object in JavaScript.
* True

3. The following code would affect which element?

$("#poem h3").click(function(){
    // some action
});

* The header element


CHALLENGES

1. Our poem page is quite bland. Spruce it up however you'd like by marshalling your CSS skills.

https://chimaboo.com/coursework/DATA70600/wk10/poem.html
https://chimaboo.com/coursework/DATA70600/wk10/poem.css

2. .map() is an important method. Get a little practice in by writing a new function that takes an array of integers and, using .map(), returns an array of those integers, doubled. So if we give it [1, 2, 3], we receive, in turn, [2, 4, 6]. Display this info in the console.

let sampleData = [1,2,3];

const doubledData = sampleData.map(function(i) {
  return i * 2;
});

console.log(doubledData);

3. .map() is similar to another method, .forEach(). We haven't covered the latter, but you may encounter it in the wild. Read through this article to understand the differences between the two, and to learn a little more about .map() specifically.

https://codeburst.io/javascript-map-vs-foreach-f38111822c0f

4. Add a new property to the JSON file that stores a wiki link for a particular literary device (e.g., here for anaphora: https://en.wikipedia.org/wiki/Anaphora_). Create a new data attribute to access this property and add it to the info message that is displayed when clicked.

https://chimaboo.com/coursework/DATA70600/wk10/poem.html
https://chimaboo.com/coursework/DATA70600/wk10/poem.js
https://chimaboo.com/coursework/DATA70600/wk10/poem.json
https://chimaboo.com/coursework/DATA70600/wk10/poem.css

https://en.wikipedia.org/wiki/Anaphora_(rhetoric)
https://en.wikipedia.org/wiki/Alliteration
https://en.wikipedia.org/wiki/Caesura

https://dev.to/oschertar/how-to-export-your-data-from-google-sheets-to-json-3ih8

~ ~ ~

On Fri, Oct 27, 2023 at 1:03 PM Matthew Stanton <pingstanton@gmail.com> wrote:

Professor Zweibel -

I am completely frustrated by the poem exercise.

https://chimaboo.com/coursework/DATA70600/wk10/poem.html
https://chimaboo.com/coursework/DATA70600/wk10/poem.js
https://chimaboo.com/coursework/DATA70600/wk10/poem.css
https://chimaboo.com/coursework/DATA70600/wk10/poem.json

Problems...

* I expected if (word.wikilink) to only trigger if there was "wikilink" content for a given line, but it triggers after every line. (In this most recent version of the .js file, I am ignoring the event handler part, just trying to place the link on the page.) In PHP terms, I was expecting javascript to behave like...

if (word.wikilink != "") { 
  do the thing for this line only
}

* The intended HTML formatting of "For more information, see <a href="https://en.wikipedia.org/wiki/Anaphora_(rhetoric)">https://en.wikipedia.org/wiki/Anaphora_(rhetoric)</a>" is not working.

* Ultimately, the point was to add this "For more information" after the info variable displayed in the document's #info ID when the highlighted word was clicked, as happens with info. However the intended code is only displayed as "undefined."

Anaphora: The repetition of a word or phrase at the beginning of (usually successive) lines. For example, the use of What in the first four lines.  For more info, see undefined

Any correct examples would be appreciated. Thank you and have a great weekend.


~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

11/2: CHAPTER 12: MAPPING WITH LEAFLET
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=13

LEAFLET
https://leafletjs.com/
https://leafletjs.com/reference.html

Leaflet is an open-source JavaScript library (like jQuery) that will help us add interactive maps to our web pages.

In the HTML (map.htm)...

<div id="map"></div>
...
<script src="map.js"></script>

In the CSS (map.css)...

#map {height: 400px;}

In the javascript (map.js)...

let someMap;
someMap = L.map("map");

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 18,
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(someMap);

poemMap.setView([40.7128, -74.0060], 16);

In the above example, the initial view of the map is zoomed most of the way in on Times Square:

* Latitude: 40.758896
* Longitude: -73.985130

ADDING MARKETS

Creates a default market at the stated latitude and longitude, and displays the given text when clicked.

const timesSquare = L.marker([40.7580, -73.9855]).addTo(poemMap);
timesSquare.bindPopup("<b>Times Square</b>");

ADDING SHAPES

const circle = L.circle([40.7580, -73.9855], {
    color: 'red',
    fillColor: '#f03',
    fillOpacity: 0.5,
    radius: 500
}).addTo(someMap);

ADDING POLYLINES

const polyline = L.polyline([
    [40.7580, -73.9855],
    [40.7486, -73.9840]
], {
    color: 'blue'
}).addTo(someMap);

polyline.bindPopup("<b>Times Square to the Graduate Center</b>");

GETTING LAT LONG FROM LEAFLET AND THE CONSOLE

const latLng = timesSquare.getLatLng();
console.log(latLng.lat);
console.log(latLng.lng);

someMap.on('click', function(e) {
    const latLng = e.latlng;
    console.log(latLng.lat);
    console.log(latLng.lng);
});

REVIEW QUESTIONS

1. Modular programming emphasizes separating the functionality of a program into smaller, independent pieces.
* True

2. After initializing your map, you should add the tile layer.
* True

3. The .addTo() method adds an object to a map.
* True

CHALLENGES

1. Create a marker at the location of your favorite restaurant, bar, cafe, or event space in NYC.

2. Draw some polylines that replicate a walk to the nearest subway station from your favorite spot in step 1. (Note: It doesn't need to be super precise: just use the click event and console.log() to map out the general coordinates of your walk at each turn.)

3. Push all your code to GitHub.


https://chimaboo.com/coursework/DATA70600/wk11/mapmilw.html
https://chimaboo.com/coursework/DATA70600/wk11/milw.css
https://chimaboo.com/coursework/DATA70600/wk11/mapmilw.js

Also customized marker to use the Summerfest logo:

https://chimaboo.com/coursework/DATA70600/wk11/smfsticon.png
https://chimaboo.com/coursework/DATA70600/wk11/smfsticonshdw.png

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

11/9: CHAPTER 13: WORKING WITH GEOSPATIAL DATA
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=14


Stanton Version of Assignment Files
https://chimaboo.com/coursework/DATA70600/wk12/nyc-data.html
https://chimaboo.com/coursework/DATA70600/wk12/nyc-data.js
https://chimaboo.com/coursework/DATA70600/wk12/nyc-data.css
https://chimaboo.com/coursework/DATA70600/wk12/nycneighborhoods.js
https://chimaboo.com/coursework/DATA70600/wk12/nycneighborhoods.json

Police Precincts
https://data.beta.nyc/dataset/nyc-police-precincts
https://chimaboo.com/coursework/DATA70600/wk12/nyc-precincts.html

Downloaded Assignment Files
https://chimaboo.com/coursework/DATA70600/wk12ref/12_nyc-data.html

REVIEW QUESTIONS

1. Each object in a GeoJSON dataset is called a:
* feature

2. True or False - The geometry property contains coordinate data for a particular feature.
* True

3. When using a dataset pulled from an online source, it is wise to: (select all that apply)
* Check the data for redundancies, duplicates, or otherwise erroneous material
* console.log() your retrievals of the data for testing purposes
* Give attribution for your source

CHALLENGES

1. Create another button that pans the map to your favorite neighborhood.

2. Draw some polylines to connect the boundaries of different neighborhoods.

3. If a neighborhood is in Manhattan, change the color of the neighborhood polygons to red. (Hint: You'll need to check for the borough property and perform style changes accordingly.)


~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

11/16: CHAPTER 14: READING DOCUMENTATION & CHAPTER 15: STARTING YOUR PROJECT
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=15
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=16

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

11/23 NO CLASS

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

11/30: CHAPTER 16: PUTTING YOUR PROJECT TOGETHER
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=17

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

12/7: CHAPTER 17: GOING LIVE
http://zweibel.net/Javascripting-Graduate-Student/workshop/javascript/?page=18


